from CHATBOT.utils import set_object_field
import json

# messagebird objects 

# NOTE: messagebird's library already has implemntations of the messagebird objects such as 
# conversation - contact - message... but that 
# implementation has a little bit extra stuff and functions that we don't need

# NOTE: sometimes requests to the maessagebird rest api don't comeback with the full attributes of
# a certan object so the conversation object for example may be missing the messages attribute

# NOTE: the attributes names in the messagebird website are sometimes different from the
# actual attributes that are sent back from the rest api for example contactId is just contact



class ChannelObj():
#     id	string	The unique ID generated by the MessageBird platform that identifies this channel.
# name	string	The name of this channel (configured through the MessageBird Dashboard).
# platformId	string	A unique identifier for the platform that is used by this channel, for example: sms, Whatsapp or messenger.
# status	string	The status of this channel. Only active channels can be used for messaging. Can be one of inactive, active, pending, activation_required, activation_code_required, activating, and deleted.
# createdDatetime	datetime	The datetime when the message was created (in RFC3339 format).
# updatedDatetime	datetime	The datetime when the message was updated (in RFC3339 format).
    def __init__(self, **args):



        pass


class ConversationObj():
    def __init__(self, parsed_json):
        self.id = set_object_field("id", parsed_json)



class MessageObj():
#     id	string	The unique ID generated by the MessageBird platform that identifies this message.
# conversationId	string	The unique ID that identifies the conversation that this message is a part of.
# channelId	string	The unique ID that identifies the channel that the message was sent or received on.
# platform	string	A unique identifier for the platform that is used by this channel, for example: sms, whatsapp or messenger.
# to	string	The unique ID that identifies the message recepient. The value depends on platform.
# from	string	The unique ID that identifies the message sender. The value depends on platform.
# direction	string	The direction of the message. Either sent for outbound messages sent through the API or received for inbound messages received from a customer.
# status	string	The status of the message. Possible values: pending, received, sent, delivered, read, unsupported, failed, and deleted.
# type	string	The type of message content. Possible values: text, image, audio, video, location, file, hsm (hsm is available only for WhatsApp), and email.
# content	Content	Content of the message. The type field indicates the fields that will be populated in this object.
# createdDatetime	datetime	The datetime when the message was created (in RFC3339 format).
# updatedDatetime	datetime	The datetime when the message was updated (in RFC3339 format).
# source	object	The source of the response/action that sent the message. An example of the source form: {"agentId": "abc123", "userId": [1,2,3], "botId": 1234567890}

    def __init__(self, parsed_json):
        
        self.id              = set_object_field("id", parsed_json)
        self.conversationId  = set_object_field("conversationId", parsed_json)
        self.channelId       = set_object_field("channelId", parsed_json)
        self.platform        = set_object_field("platform", parsed_json)
        self.to              = set_object_field("to", parsed_json)
        self.sender          = set_object_field("from", parsed_json) # from is reserved
        self.direction       = set_object_field("direction", parsed_json)
        self.status          = set_object_field("status", parsed_json)
        self.type            = set_object_field("type", parsed_json)
        self.content         = set_object_field("content", parsed_json)
        self.createdDatetime = set_object_field("createdDatetime", parsed_json)
        self.updatedDatetime = set_object_field("updatedDatetime", parsed_json)
        self.source          = set_object_field("source", parsed_json)

    @property
    def Content(self):
        return MessageContentObj(self.content)

    def jsonify(self):
        pass


class MessageContentObj():

    def __init__(self, parsed_json):
        self._content = parsed_json
        pass

    @property
    def content(self):
        if "text" in self._content:
            return self._content["text"]
        elif "hsm" in self._content:
            return HSMObj(self._content)
        else:
            return self._content

    def jsonify(self):
        pass

class HSMObj():
#     hsm.namespace	string	Required. WhatsApp namespace for your account. You will receive this value when setting up your WhatsApp account.
# hsm.templateName	string	Required. The name of the template.
# hsm.language	HSMLanguage	Required.
# hsm.params	array of HSMLocalizableParameters	Required when a regular template is needed to be used. Otherwise must not be set.
# hsm.components	array of HSMComponents	Required when a media template is needed to be used, otherwise must not be set.

    def __init__(self, parsed_json):
        
        self.namespace =    set_object_field("namespace", parsed_json)
        self.templateName = set_object_field("templateName", parsed_json)
        self.language =     set_object_field("language", parsed_json) # create class
        self.params =       set_object_field("params", parsed_json)
        self.components =   set_object_field("components", parsed_json) # create class

    def jsonify(self):
        pass

class ContactObj():


    def __init__(self, parsed_json):
        
        self.id =              set_object_field("id", parsed_json)
        self.href =            set_object_field("href", parsed_json)
        self.number =          set_object_field("msisdn", parsed_json)
        self.firstName =       set_object_field("firstName", parsed_json)
        self.lastName =        set_object_field("lastName", parsed_json)
        self.customDetails =   set_object_field("customDetails", parsed_json)
        self.createdDatetime = set_object_field("createdDatetime", parsed_json)
        self.updatedDatetime = set_object_field("updatedDatetime", parsed_json)
        
    @property    
    def CustomDetails(self):
        return CustomerDetailObj(self.customDetails)

    def jsonify(self):
        pass


class CustomerDetailObj():

    def jsonify(self):
        pass




